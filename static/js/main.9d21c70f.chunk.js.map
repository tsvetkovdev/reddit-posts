{"version":3,"sources":["Components/Item/Item.jsx","redux/actions/items.js","Components/Loader/Loader.js","Components/Main/Main.jsx","App.jsx","serviceWorker.js","redux/reducers/autoRefresh.js","redux/reducers/items.js","redux/reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","height","padding","spacing","paper","margin","backgroundColor","borderRadius","button","marginBottom","width","title","fontSize","comments","link","textDecoration","color","img","Item","props","classes","data","console","log","className","Paper","Grid","item","thumbnail_height","src","thumbnail","alt","Typography","variant","num_comments","Button","href","permalink","target","addItems","type","payload","Loader","flexWrap","input","textAlign","PrettoSlider","withStyles","thumb","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","rail","Slider","pure","dispatch","useDispatch","items","useSelector","state","autoRefresh","useState","minComments","setMinComments","timer","setTimer","Items","getItems","a","fetch","res","json","children","useEffect","container","onClick","clearInterval","setInterval","valueLabelDisplay","aria-label","defaultValue","onChange","event","newValue","min","max","step","filter","sort","b","map","key","id","App","Boolean","window","location","hostname","match","action","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d21c70f.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    height: '100%',\r\n    padding: theme.spacing(2),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    margin: 'auto',\r\n    backgroundColor: 'rgb(220, 238, 255)',\r\n    borderRadius: '10px'\r\n  },\r\n  button: {\r\n    marginBottom: '15px',\r\n    width: '200px'\r\n  },\r\n  title: {\r\n    width: '100%',\r\n    margin: '30px',\r\n    fontSize: '28px'\r\n  },\r\n  comments: {\r\n   marginBottom: '15px'\r\n  },\r\n  link:{\r\n    textDecoration: 'none',\r\n    color: 'gray'\r\n  },\r\n  img: {\r\n    width: '140px',\r\n    height: '110px'\r\n  },\r\n  \r\n \r\n  \r\n  \r\n  \r\n}));\r\n\r\nexport default function Item (props) {\r\n  const classes = useStyles()\r\n  const data = props.data\r\n  console.log(data)\r\n    return (\r\n      <div className={classes.root}>\r\n        <Paper className={classes.paper}>\r\n        <Grid item className={classes.img}>\r\n        {data.thumbnail_height ? \r\n        <img src={data.thumbnail} alt=\"\" />\r\n        : \r\n        <img className={classes.img} src={'img2.svg'} alt=\"\" />\r\n        }\r\n        </Grid>\r\n        <Typography variant=\"subtitle1\">{data.title}</Typography>\r\n        <Typography variant=\"subtitle2\">Number of comments: {data.num_comments}</Typography>\r\n        <Button>\r\n        <a href={`https://www.reddit.com/${data.permalink}`} target=\"_blank\" className={classes.link}>\r\n          Go to post\r\n        </a>\r\n        </Button>\r\n        </Paper>\r\n      </div>\r\n    );\r\n \r\n}\r\n","export const addItems = (data) => {\r\n  return{\r\n    type: 'FETCHISLOADED',\r\n    payload: data,\r\n  }\r\n  \r\n}\r\n\r\nexport const refresh = () => {\r\n  return{\r\n    type: 'ENABLE_AUTO_REFRESH',\r\n  }\r\n}","import React from 'react'\r\nimport './Loader.css'\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React, {useState, useEffect} from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Item from \"../Item/Item\";\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {addItems, refresh} from '../../redux/actions/items'\r\nimport { pure } from 'recompose';\r\nimport Loader from '../Loader/Loader'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    flexWrap: 'wrap',\r\n    height: '100vh',\r\n    \r\n    padding: theme.spacing(15),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    backgroundColor: 'rgb(230, 238, 255)',\r\n    borderRadius: '10px'\r\n  },\r\n  button: {\r\n    marginBottom: '15px',\r\n    width: '200px'\r\n  },\r\n  title: {\r\n    width: '100%',\r\n    margin: '30px',\r\n    fontSize: '28px'\r\n  },\r\n  comments: {\r\n   marginBottom: '15px'\r\n  },\r\n  input: {\r\n    width: '100%',\r\n    height: '100%',\r\n    textAlign: 'center',\r\n   \r\n  },\r\n  \r\n  \r\n  \r\n}));\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    color: '#52af77',\r\n    height: 8,\r\n  },\r\n  thumb: {\r\n    height: 24,\r\n    width: 24,\r\n    backgroundColor: '#fff',\r\n    border: '2px solid currentColor',\r\n    marginTop: -8,\r\n    marginLeft: -12,\r\n    '&:focus, &:hover, &$active': {\r\n      boxShadow: 'inherit',\r\n    },\r\n  },\r\n  active: {},\r\n  valueLabel: {\r\n    left: 'calc(-50% + 4px)',\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4,\r\n  },\r\n})(Slider);\r\n\r\n\r\nfunction Main() {\r\n  \r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const items = useSelector(state => state.items)\r\n  const autoRefresh = useSelector(state => state.autoRefresh)\r\n  const [minComments, setMinComments] = useState(0)\r\n  const [timer, setTimer] = useState()\r\n\r\n  \r\n\r\n  const Items = items.items\r\n\r\n  useEffect(()=>{\r\n    getItems()\r\n  },[])\r\n\r\n  async function getItems () {\r\n   \r\n    const res = await fetch(\"https://www.reddit.com/r/reactjs.json?limit=100\")\r\n      const data = await res.json()\r\n      dispatch(addItems(data.data.children))\r\n      \r\n      \r\n  };\r\n\r\n  \r\n  const updateAutoRefresh = () => {\r\n    \r\n    if (autoRefresh) {\r\n      clearInterval(timer);\r\n      dispatch(refresh()); \r\n        \r\n    } else {\r\n      dispatch(refresh());\r\n      setTimer(setInterval(getItems, 3000))\r\n      \r\n    }\r\n  };\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setMinComments(newValue);\r\n  };\r\n  \r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Paper className={classes.paper}>\r\n          <Grid container>\r\n          <Grid item className={classes.title}>\r\n        <Typography  variant=\"h1\" className={classes.comments}>Top Commented</Typography>\r\n        <Grid item className={classes.comments}>current filter {minComments}</Grid>\r\n        <Button\r\n          className={classes.button}\r\n          onClick={()=>{updateAutoRefresh()}}\r\n        >\r\n          {autoRefresh ? \"Stop\" : \"Start\"} auto refresh\r\n        </Button>\r\n        <PrettoSlider \r\n         valueLabelDisplay=\"auto\" \r\n         aria-label=\"pretto slider\"\r\n         defaultValue={0} \r\n         onChange={handleSliderChange} \r\n         min={0} \r\n         max={500} \r\n         step={1}\r\n         />\r\n        </Grid>\r\n        {Items ? (\r\n            \r\n            Items.filter(item => item.data.num_comments >= minComments)\r\n            .sort((a, b) => b.data.num_comments - a.data.num_comments)\r\n            .map((item) => <Item key={item.data.id} data={item.data} />)\r\n           \r\n        ) : (\r\n          <Loader />\r\n           )}\r\n\r\n           </Grid>\r\n           </Paper>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default pure(Main)","import React from \"react\";\nimport Main from './Components/Main/Main'\n\nfunction App() {\n  \n\n \n\n    return (\n      <div>\n       <Main />\n      </div>\n    );\n  }\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const autoRefresh = (state = false, action) => {\r\n  switch(action.type) {\r\n    case 'ENABLE_AUTO_REFRESH': \r\n    return !state;\r\n    default: \r\n    return state\r\n  }\r\n}\r\nexport default autoRefresh","\r\n\r\nconst items = (state = [] , action) => {\r\n  switch(action.type) {\r\n    case 'FETCHISLOADED': \r\n      return { \r\n        items: action.payload\r\n      }\r\n    default:\r\n     return state;\r\n\r\n  }\r\n};\r\n\r\nexport default items;","import {combineReducers} from 'redux'\r\nimport autoRefresh from './autoRefresh'\r\nimport items from './items'\r\n\r\nconst allReducers = combineReducers({\r\n  autoRefresh,\r\n  items,\r\n})\r\n\r\nexport default allReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore } from 'redux'\nimport allReducers from './redux/reducers'\nimport {Provider} from 'react-redux'\n\nconst store = createStore(allReducers,  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <Provider store={store}>\n  \n    <App />\n  \n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}